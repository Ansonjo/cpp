git config --global user.name=***  "配置全局" 
git config --list "查看全局配置"
git config --global credential.helper store "会保存密码,下次操作远程库就无须输入密码了"
git init 	"创建版本库"
git status 	"查看仓库当前状态"
git diff +fileName	"查看原来和现在的差别"
git add	+ fileName	"把修改过的文件添加到暂存区中"
git rm + fileName
git log 	"查看最近到最远的提交日志"  --pretty=oneline "单行显示"
git commit -m   "提交新版本"
git commit --amend "修改最近提交的标签内容"
git reset --hard HEAD~n  "回到第几个版本"
git reset --hard HEAD^   "回到上一个版本"
git reset --hard commitId "回到指定id版本"
git checkout  fileName "丢弃工作区的修改"
git reset HEAD fileName "把暂存区的修改撤销掉"
git log 	"显示历史提交记录"
git reflog 	"查看你命令历史,找到最新的id"
ssh-keygen -t rsa -C "youremail@example.com "生成ssh密钥,用连接远程仓库的"
git remote add 远程库名 git@github.com:userName/learngit.git "设置远程库的名字,一般为origin"
git push -u origin master "把master分支内容推送到远程的master分支,并且把本地master和远程master进行关联,-u 起到关联两个分支的作用"
git pull git@github.com:userName/learngit.git "把远程的东西拉下来,如果已经关联则不需要后面的地址,直接git pull"
git clone + 远程仓库地址 克隆一个仓库
git checkout -b 分支名 "创建并切换到该分支"
git branch + 分支名 	"创建分支"
git checkout + 分支名	"切换到该分支"
git branch	"查看当前分支"
git merge + 分支名	"把当前分支和该分支合并,这属于Fast-forward合并模式"
git merge --no-ff -m "commitMsg" 分支名	"禁用Fast-forward合并模式"
git log --graph "图形化的显示历史提交记录"
git stash "储存工作现场"
git stash apply "恢复工作现场" 
git stash drop 	"删除stash内容"
git stash pop 	"恢复工作现场并且删除stash内容"
git stash list 	"查看stash内容"
git branch -D 分支名	"强行删除一个还没有合并的分支"
git remote 	"查看远程库信息"
git remote -v 	"显示更详细的信息"
git branch --set-upstream branch-name origin/branch-name "把本地分支和远程分支链接起来"
git checkout -b branch-name origin/branch-name "在本地创建和远程对应的分支"
git tag tagname (commitId)	"新建一个标签,不指定commitId就默认为HEAD"
git tag -a tagename -m"文字说明"	"指定标签信息"
git tag -s tagname -m"文字说明"		"使用PGP签名标签"
git tag?"查看所有签名"
git show tagname	"查看标签信息"
git tag -d tagname "删除该标签"
git push origin tagname	"推送本地该标签"
git push origin --tags "推送所有标签"
git push origin :refs/tags/tagname "删除远程标签时,需要先删除本地标签"
git config --global alias.命令别名 命令 "给命令起别名"
